[manifest]
version = "1.0.0"
priority = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "function get_new_boss()"
position = "before"
payload = '''
function get_new_blind(kind)
    G.GAME.perscribed_blinds = G.GAME.perscribed_blinds or {
    }
    if G.GAME.perscribed_blinds and G.GAME.perscribed_blinds[G.GAME.round_resets.ante] then 
        local ret_blind = G.GAME.perscribed_blinds[G.GAME.round_resets.ante] 
        G.GAME.perscribed_blinds[G.GAME.round_resets.ante] = nil
        G.GAME.blinds_used[ret_blind] = G.GAME.blinds_used[ret_blind] + 1
        return ret_blind
    end
    if G.FORCE_BLIND then return G.FORCE_BLIND end
    
    local eligible_blinds = {}
    for k, v in pairs(G.P_BLINDS) do
        if v[kind] then
            -- Right now every alternative blind is possible
            eligible_blinds[k] = true
        end
    end
    
    for k, v in pairs(G.GAME.banned_keys) do
        if eligible_blinds[k] then eligible_blinds[k] = nil end
    end

    local min_use = 100
    for k, v in pairs(G.GAME.blinds_used[kind]) do
        if eligible_blinds[k] then
            eligible_blinds[k] = v
            if eligible_blinds[k] <= min_use then 
                min_use = eligible_blinds[k]
            end
        end
    end
    for k, v in pairs(eligible_blinds) do
        if eligible_blinds[k] then
            if eligible_blinds[k] > min_use then 
                eligible_blinds[k] = nil
            end
        end
    end
    local _, blind = pseudorandom_element(eligible_blinds, pseudoseed('blind'))
    
    G.GAME.blinds_used[kind][blind] = G.GAME.blinds_used[kind][blind] + 1
    
    return blind
end

'''
match_indent = true