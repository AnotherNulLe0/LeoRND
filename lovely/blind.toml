[manifest]
version = "1.0.0"
priority = 1

# get_new_blind()

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "function get_new_boss()"
position = "before"
payload = '''
function get_new_blind(kind)
    G.GAME.perscribed_blinds = G.GAME.perscribed_blinds or {
    }
    if G.GAME.perscribed_blinds and G.GAME.perscribed_blinds[G.GAME.round_resets.ante] then 
        local ret_blind = G.GAME.perscribed_blinds[G.GAME.round_resets.ante] 
        G.GAME.perscribed_blinds[G.GAME.round_resets.ante] = nil
        G.GAME.blinds_used[ret_blind] = G.GAME.blinds_used[ret_blind] + 1
        return ret_blind
    end
    if G.FORCE_BLIND then return G.FORCE_BLIND end
    
    local eligible_blinds = {}
    for k, v in pairs(G.P_BLINDS) do
        if v[kind] and v.in_pool and type(v.in_pool) == "function" then
            -- Right now every alternative blind is possible
            eligible_blinds[k] = v:in_pool() and true or nil
        elseif v[kind] and v.in_pool and type(v.in_pool) == "boolean" then
            eligible_blinds[k] = v.in_pool and true or nil
        elseif v[kind] then
            eligible_blinds[k] = true
        end
    end
    
    for k, v in pairs(G.GAME.banned_keys) do
        if eligible_blinds[k] then eligible_blinds[k] = nil end
    end

    local min_use = 100
    for k, v in pairs(G.GAME.blinds_used[kind]) do
        if eligible_blinds[k] then
            eligible_blinds[k] = v
            if eligible_blinds[k] <= min_use then 
                min_use = eligible_blinds[k]
            end
        end
    end
    for k, v in pairs(eligible_blinds) do
        if eligible_blinds[k] then
            if eligible_blinds[k] > min_use then 
                eligible_blinds[k] = nil
            end
        end
    end
    local _, blind = pseudorandom_element(eligible_blinds, pseudoseed('blind'))
    
    G.GAME.blinds_used[kind][blind] = G.GAME.blinds_used[kind][blind] + 1
    
    return blind
end

'''
match_indent = true

# Add support for multiple small and big blind variations
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local bosses_used = {}"
position = "after"
payload = '''
local blinds_used = { small={ }, big={ } }
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.boss.showdown then"
position = "at"
payload = '''
if v.boss and v.boss.showdown then 
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if v.boss then bosses_used[k] = 0 end"
position = "at"
payload = '''
if v.boss then 
    bosses_used[k] = 0
elseif v.big then
    blinds_used.big[k] = 0
else
    blinds_used.small[k] = 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "bosses_used = bosses_used,"
position = "after"
payload = '''
blinds_used = blinds_used,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "bl_small =           {name = 'Small Blind',  defeated = false, order = 1, dollars = 3, mult = 1,  vars = {}, debuff_text = '', debuff = {}, pos = {x=0, y=0}},"
position = "at"
payload = '''
bl_small = {name = 'Small Blind', small = true, defeated = false, order = 1, dollars = 3, mult = 1,  vars = {}, debuff_text = '', debuff = {}, pos = {x=0, y=0}},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "bl_big =             {name = 'Big Blind',    defeated = false, order = 2, dollars = 4, mult = 1.5,vars = {}, debuff_text = '', debuff = {}, pos = {x=0, y=1}},"
position = "at"
payload = '''
bl_big = {name = 'Big Blind', big = true, defeated = false, order = 2, dollars = 4, mult = 1.5,vars = {}, debuff_text = '', debuff = {}, pos = {x=0, y=1}},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if not saveTable then\n\t\tself.GAME.round_resets.blind_choices.Boss = get_new_boss()"
position = "after"
payload = '''
    self.GAME.round_resets.blind_choices.Small = get_new_blind("small")
    self.GAME.round_resets.blind_choices.Big = get_new_blind("big")
'''
match_indent = true

# Make small/big blind variants work like thier counterparts
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = 'if self.name == "Small Blind" then'
position = "at"
payload = '''
if self.small or self.name == "Small Blind" then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = 'elseif self.name == "Big Blind" then'
position = "at"
payload = '''
elseif self.big or self.name == "Big Blind" then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = 'if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then'
position = "at"
payload = '''
if G.GAME.round_resets.blind.small then
'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = 'elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then'
position = "at"
payload = '''
elseif G.GAME.round_resets.blind.big then
'''
match_indent = true
times = 2

# Make blind variants return thier type and not Boss
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = 'self.boss = blind and not not blind.boss'
position = "at"
payload = '''
self.small = blind and blind.small
self.big = blind and blind.big
self.boss = blind and blind.boss
'''
match_indent = true

# Next ante
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = 'G.GAME.round_resets.blind_choices.Boss = get_new_boss()'
position = "at"
payload = '''
G.GAME.round_resets.blind_choices.Small = get_new_blind("small")
G.GAME.round_resets.blind_choices.Big = get_new_blind("big")
G.GAME.round_resets.blind_choices.Boss = get_new_boss()
'''
match_indent = true

